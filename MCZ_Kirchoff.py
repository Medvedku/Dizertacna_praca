import numpy as np
import sympy as sp

np.set_printoptions(precision=2)

x0, y0 = sp.symbols("x0,y0")
x1, y1 = sp.symbols("x1,y1")
x2, y2 = sp.symbols("x2,y2")
x3, y3 = sp.symbols("x3,y3")
x4, y4 = sp.symbols("x4,y4")
r,  s  = sp.symbols("r,s")

E  = 210 * 1e9
mi = 0.3
h  = 0.01
p  = 1000
a  = 0.5
b  = 0.5

D = (E * h**3) / (12*(1-mi**2))

#Â Constitutive matrix

D = E / (1 - mi**2) * np.array( [   [1,  mi, 0        ],
                                    [mi, 1,  0        ],
                                    [0,  0,  (1-mi)/2 ] ] )

# x1 = -a / 2
# x2 = +a / 2
# x3 = +a / 2
# x4 = -a / 2
#
# y1 = -b / 2
# y2 = +b / 2
# y3 = +b / 2
# y4 = -b / 2

A = sp.Matrix([
[1, x1, y1, x1**2, x1*y1, y1**2, x1**3,     (x1**2)*y1, x1*(y1**2), y1**3,   (x1**3)*y1,   x1*(y1**3) ],
[0, 1,  0,  2*x1,  y1,    0,     3*(x1**2), 2*x1*y1,    y1**2,      0,       3*(x1**2)*y1, y1**3      ],
[0, 0,  1,  0,     x1,    2*y1,  0,         x1**2,      2*x1*y1,    3*y1**2, x1**3,        2*x1*y1**2 ],
[1, x2, y2, x2**2, x2*y2, y2**2, x2**3,     (x2**2)*y2, x2*(y2**2), y2**3,   (x2**3)*y2,   x2*(y2**3) ],
[0, 1,  0,  2*x2,  y2,    0,     3*(x2**2), 2*x2*y2,    y2**2,      0,       3*(x2**2)*y2, y2**3      ],
[0, 0,  1,  0,     x2,    2*y2,  0,         x2**2,      2*x2*y2,    3*y2**2, x2**3,        2*x2*y2**2 ],
[1, x3, y3, x3**2, x3*y3, y3**2, x3**3,     (x3**2)*y3, x3*(y3**2), y3**3,   (x3**3)*y3,   x3*(y3**3) ],
[0, 1,  0,  2*x3,  y3,    0,     3*(x3**2), 2*x3*y3,    y3**2,      0,       3*(x3**2)*y3, y3**3      ],
[0, 0,  1,  0,     x3,    2*y3,  0,         x3**2,      2*x3*y3,    3*y3**2, x3**3,        2*x3*y3**2 ],
[1, x4, y4, x4**2, x4*y4, y4**2, x4**3,     (x4**2)*y4, x4*(y4**2), y4**3,   (x4**3)*y4,   x4*(y4**3) ],
[0, 1,  0,  2*x4,  y4,    0,     3*(x4**2), 2*x4*y4,    y4**2,      0,       3*(x4**2)*y4, y4**3      ],
[0, 0,  1,  0,     x4,    2*y4,  0,         x4**2,      2*x4*y4,    3*y4**2, x4**3,        2*x4*y4**2 ]
])

print(A.inv())
